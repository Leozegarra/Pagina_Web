const { Sequelize } = require('sequelize');
require('dotenv').config();

// Configuraci√≥n SSL para OCI (solo si est√° habilitado y el servidor lo soporta)
const sslConfig = process.env.DB_SSL === 'true' ? {
  ssl: {
    require: true,
    rejectUnauthorized: process.env.DB_SSL_REJECT_UNAUTHORIZED === 'true'
  }
} : {};

// Crear instancia de Sequelize con configuraci√≥n de OCI
const sequelize = new Sequelize(
  process.env.DB_NAME,
  process.env.DB_USER,
  process.env.DB_PASSWORD,
  {
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    dialect: 'postgres',
    dialectOptions: {
      ...sslConfig,
      connectTimeout: 60000,
      acquireTimeout: 60000,
      timeout: 60000,
    },
    pool: {
      max: 5,
      min: 0,
      acquire: 30000,
      idle: 10000
    },
    logging: console.log
  }
);

async function testConnection() {
  try {
    console.log('üîå Probando conexi√≥n a PostgreSQL en OCI...');
    console.log(`üìç Host: ${process.env.DB_HOST}`);
    console.log(`üìä Base de datos: ${process.env.DB_NAME}`);
    console.log(`üë§ Usuario: ${process.env.DB_USER}`);
    console.log(`üîí SSL: ${process.env.DB_SSL === 'true' ? 'Habilitado' : 'Deshabilitado'}`);
    console.log('‚è≥ Conectando...\n');

    // Probar conexi√≥n
    await sequelize.authenticate();
    
    console.log('‚úÖ ¬°Conexi√≥n exitosa!');
    console.log('üéâ La base de datos PostgreSQL en OCI est√° funcionando correctamente.');
    
    // Probar una consulta simple
    const [results] = await sequelize.query('SELECT NOW() as current_time');
    console.log(`‚è∞ Hora del servidor: ${results[0].current_time}`);
    
    // Verificar tablas existentes
    const tables = await sequelize.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    
    console.log('\nüìã Tablas existentes en la base de datos:');
    if (tables[0].length > 0) {
      tables[0].forEach(table => {
        console.log(`  - ${table.table_name}`);
      });
    } else {
      console.log('  (No hay tablas creadas a√∫n)');
    }
    
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n:');
    console.error(error.message);
    
    // Sugerencias de soluci√≥n
    console.log('\nüîß Posibles soluciones:');
    console.log('1. Verifica que las variables de entorno est√©n configuradas correctamente');
    console.log('2. Aseg√∫rate de que el servidor PostgreSQL est√© ejecut√°ndose en OCI');
    console.log('3. Verifica que el firewall permita conexiones al puerto 5432');
    console.log('4. Confirma que las credenciales sean correctas');
    console.log('5. Si usas SSL, verifica la configuraci√≥n de certificados');
    
  } finally {
    await sequelize.close();
    console.log('\nüîå Conexi√≥n cerrada.');
  }
}

// Ejecutar prueba
testConnection(); 